@page "/Profil";
@using PDSA_System.Shared.Models;
@inject HttpClient Http;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider GetAuthenticationStateAsync;

<div class="content">
    <h1>Profile</h1>

    <!--Knapp for å sende bruker til opprettBruker side, fungerer ikke enda da Admin commit må på plass-->
    <p>Hvis du ikke har lagd bruker, vennligst legg til bruker for å endre profil informasjon</p>
    <button type="button" class="btn-success rounded" @onclick="@(()=>NavigationManager.NavigateTo("/LagBrukerPage"))">Legg til bruker</button>
    <br />
    <br />

    <hr />
    <div class="form-group">
        <form>
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="fornavn">Fornavn</label>
                <input type="text" class="form-control" id="fornavn" name="fornavn" @bind="@bruker.Fornavn" placeholder="Fornavn" />
            </div>
            <div class="form-group">
                <label for="etternavn">Etternavn</label>
                <input type="text" class="form-control" id="etternavn" name="etternavn" @bind="@bruker.Etternavn" placeholder="Etternavn" />
            </div>
            <div class="form-group">
                <label for="epost">Epost</label>
                <input type="text" class="form-control" id="epost" name="epost" @bind="@bruker.Email" placeholder="Epost" />

            </div>
            <div class="form-group">
                <label for="passord">Passord</label>
                <input type="password" class="form-control" id="passord" name="passord" @bind="@bruker.PassordHash" placeholder="Passord" />
            </div>
            <br />
            <button type="button" class="btn" @onclick="@ModalCancel">Avbryt</button>
            <button type="button" class="btn btn-success" @onclick="@ModalShow">Oppdater</button>
        </form>       
    </div>
</div>

@if (showModal)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Endring av profilinformasjon</h4>
                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>
                
                <!-- Modal footer -->
                <div class="modal-footer">
                    <h4>Du endrer nå din profilinformasjon, er du sikker du vil oppdatere?</h4>
                    <button type="button" class="btn" @onclick="@ModalCancel">Avbryt</button>
                    <button type="button" class="btn btn-success" @onclick="@(()=>SaveItem(bruker.AnsattNr))">Oppdater</button>
                </div>

            </div>
        </div>
    </div>
}

        
@code {

    //GET-metode for å hente den spesifik bruker i db. Basert på Victor sitt
    private Bruker bruker = new Bruker();
    private Bruker? _bruker;

    protected override async Task OnInitializedAsync() =>
    _bruker = await Http.GetFromJsonAsync<Bruker>($"/api/Bruker/{_bruker.AnsattNr}");

    //Sjekker om autentisert bruker er logget inn
    private async Task BrukerCheck()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var ansattNr = user.Identities.First().Claims.FirstOrDefault(claim => claim.Type == "brukerId")?.Value;
        Console.WriteLine(ansattNr);
    }

    // Modal
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk()
    {
        Console.WriteLine("Modal ok");
        showModal = false;
    }

    private async Task SaveItem(int id) =>
    await Http.PutAsJsonAsync($"/apiBruker/admin/UpdateBruker/{id}", bruker);


}
